TO DO:
- enemy random spawnpoints
	need to check for valid empty tile
- player spawnpoint
	check for start tile > transform position
- obstacle checks
	make sure there is a valid win path/no blocked start or exit

- enemy movement
	turn manager for multiple enemies

- inventory
	add component to player, ref. GJam Remake inv. list
	add display (right now is GameHUD)
- items (ref. term1 assignment)
	add general properties & unique items (AND custom)
	item idea: scroll of wind (can hit an enemy back a tile)
	item idea: warp scroll (sends player to a random empty tile) 

	null checks that used to be in Player.cs (Start() method)
	//if (globals == null)
            //{
             //   Debug.WriteLine("Player: globals is NULL!"); 
             //   return;
            //}
			//healthSystem = GameObject.GetComponent<HealthSystem>(); // health
            //if (healthSystem == null)
            //{
            //    healthSystem = GameObject.FindObjectOfType<HealthSystem>();
            //}
			//if (globals._mapSystem == null)
            //{
            //    Debug.WriteLine("Player: globals._mapSystem is NULL! Trying to find it..."); 
            //    globals._mapSystem = GameObject.FindObjectOfType<MapSystem>();
            //}
			in update()
			if (tileMap != null)
                {
                    Debug.WriteLine("Player: tileMap assigned in Update!");
                }
                else
                {
                    Debug.WriteLine("Player: tileMap STILL NULL in Update!");
                    return;
                }

Old map generation code for LOADING FROM TXT FILE
in Start()
// Load map from.txt file
            //LoadMapFromFile("C:\\MY FILES\\Programming\\Unity Projects NSCC\\" + 
            //"GameProgII_2DGame_Julia_C02032025\\MyMaps\\Map1.txt");
            //LoadMapFromFile("C:\\Users\\W0517383\\Documents\\GitHub\\" +
            //  "GameProgII_2DGame_Julia_C02032025\\MyMaps\\Map1.txt");

other
// Loads a map from a text file, parsing tile characters and setting textures accordingly.
        public void LoadMapFromFile(string filePath)
        {
            try
            {
                // Read all lines from the file
                string[] lines = System.IO.File.ReadAllLines(filePath);
                Debug.WriteLine($"MapSystem: Loaded map with " +
                    $"{lines.Length} lines and {lines[0].Length} " +
                    $"characters in first line.");

                // Validate map dimensions
                if (lines.Length != mapHeight || lines[0].Length != mapWidth)
                {
                    Debug.WriteLine("MapSystem Error: Map file dimensions do not match expected size.");
                    return;
                }

                // Loop through each line
                for (int y = 0; y < mapHeight; y++)
                {   // Loop throug each char
                    for (int x = 0; x < mapWidth; x++)
                    {
                        Sprite tile = Tilemap.GetTileAt(x, y);
                        char tileChar = lines[y][x];

                        switch (tileChar)
                        {
                            case 'F': tile.Texture = Tilemap.floorTexture; break;
                            case 'X': tile.Texture = Tilemap.obstacleTexture; break;
                            case 'S': tile.Texture = Tilemap.startTexture; break;
                            case 'E': tile.Texture = Tilemap.exitTexture; break;
                            default:
                                Debug.WriteLine($"Unknown tile '{tileChar}' at ({x}, {y})");
                                break;
                        }
                        Debug.WriteLine($"Tile at ({x}, {y}) set to {tileChar}");
                    }
                }
                Debug.WriteLine("Map successfully loaded from file.");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error loading map: {ex.Message}");
            }
        }
        ** was in Combat.cs
        /*
 * private void TurnManager() 
        {
            // list of GameObjects turnTakers (includes player & all enemies)
            // index currentTurn = 0 or -1
            // Update (entry) every frame
            // - if valid index? (>=0 and < turnTakers.Count)
            // - if valid check if 
            //      has taken turn?
            //      has turn ended?
            // if both are true
            //      change to next index
            //      call take turn ()
            // nothing to do (after has taken turn & has turn ended both have happened)
            // else: find next valid
            // set has taken turn to false & has turn ended to false (after change to next index and find next valid)
        }
*/
DEBUGGING OUTPUT - combat-enemies-pathfinding
Combat: Current turn object is GameObject
Combat: Player's turn.
Combat: PlayerTurn() called
Player: moved to position - {X:544 Y:416}
Player: checking for enemy at 17, 13
Player: no enemy found
Combat: Advanced to turn index 1
Combat: Current turn object is GameObject
Combat: Enemy's turn.
Combat: EnemyTurn called
Enemy: checking if enemy is next to player
Enemy: Pathfinding is NULL!
Enemy: position: {X:19 Y:6}, Player position: {X:17 Y:13}
Enemy: path finding failed. Path is null
Combat: Advanced to turn index 2



was in Pathfinding.cs
// Calculate cost from start (check surrounding 'nodes' or tiles)
// cost to end/enemy
// move towards lowest cost (no diagonal)
// need to account for moving objects (keep calculating in update during turn)
// youtube Sebastian Lague pathfinding video on A star pathfinding
// checking neighbors

// [ ] [X Y+1 ] [ ]
// [X Y-1 ] [X Y ] [X Y+1 ]
// [ ] [X Y-1 ] [ ]

// when checking neoghbors, only read neighbors if X, Y are one of them 0
// like if X != 0 && Y != 0 continue;